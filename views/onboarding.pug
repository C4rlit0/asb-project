extends layout

block content
  main
    include partials/flash
    .container.col-xl-10.col-xxl-8.px-4.py-3
      .row.align-items-center.g-lg-5.py-5#onboardingStepOne
        .col-12.col-md-5.col-lg-7.text-center.text-lg-start
          h1.display-4.fw-bold.lh-1.mb-3 ðŸ‘‹ Hello, put your automations safe!
          p.col-lg-10.fs-5
            | To enable our system to save your Airtable automations, we need a Github Fine-grained Personal Access Token on a new repository. 
            br
            | You can find the documentation on how to create one 
            a(href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-fine-grained-personal-access-token" target="_blank") here
          
            p
              small.fst-italic Your Github PAT needs these permissions to work:
            ul.list-group
              li.list-group-item.py-0
                span.d-flex.justify-content-between.my-2
                  small.fw-bold Contents
                  small.text-muted Read and write
              li.list-group-item.py-0
                span.d-flex.justify-content-between.my-2
                  small.fw-bold Metadata
                  small.text-muted Read-only
              li.list-group-item.py-0
                span.d-flex.justify-content-between.my-2
                  small.fw-bold Workflows
                  small.text-muted Read and write

        //- Column with Github Repo URL and Github PAT inputs
        .col-12.col-md-5.col-lg-5.mx-auto
          form.p-3.p-md-5.border.rounded-3.bg-light#form(method='POST' action='/onboarding')
            input(type='hidden', name='_csrf', value=_csrf)
            .form-floating.mb-3#repoForm
              input#floatingInputRepo.form-control(type='url', name="floatingInputRepo" placeholder='Enter your Github repo URL' required)
              label(for='floatingInputRepo') Enter your Github repo URL
            .form-floating.mb-3#patForm
              input#floatingInputPat.form-control(type='text', name="floatingInputPat" placeholder='Enter your Github PAT' required)
              label(for='floatingInputPat') Enter your Github PAT
            button#submitBtn.w-100.btn.btn-lg.btn-primary(type='submit') Next
            hr.my-4
            small.text-muted By clicking Next, you agree to the 
              a(href="#") terms of use.
      
      //- Column with Github Repo infos
      .row.align-items-center.g-lg-5.py-5.d-none#onboardingStepTwo
        .col-12.col-md-5.col-lg-7.text-center.text-lg-start
          h1.display-4.fw-bold.lh-1.mb-3 ðŸŽ‰ Let's check that everything is correct!
          p.col-lg-10.fs-5
            | Check that the identified repo is the right one
            br
            | It's in this directory that we will save your Airtable automations.
        .col-12.col-md-5.col-lg-5.mx-auto
          form#form(method='POST' action='/onboarding/nextstep')
            input(type='hidden', name='_csrf', value=_csrf)
            .card.my-5.p-3.p-md-5.border.rounded-3.bg-light
              .card-body
                h6.card-subtitle.mb-2.muted-text Owner name
                h5.card-title Repository name
                p.card-text Repo description
                //- Creation date small and text aligned right
                .card-date.text-end.text-muted
                  small Creation date
              button#finishBtn.w-100.btn.btn-lg.btn-primary(type='submit') Finish
              //- Add link to return if repo is not the right one
              a.btn.btn-link#changeRepoBtn(href="#") Change repo


  script.
    //- On click, check if the Github PAT is valid
    const onboardingStepOne = document.getElementById('onboardingStepOne');
    const onboardingStepTwo = document.getElementById('onboardingStepTwo');
    const submitBtn = document.getElementById('submitBtn');
    const finishBtn = document.getElementById('finishBtn');
    const changeRepoBtn = document.getElementById('changeRepoBtn');
    const form = document.getElementById('form');
    const repoForm = document.getElementById('repoForm');
    const patForm = document.getElementById('patForm');
    const inputRepo = document.getElementById('floatingInputRepo');
    const inputPat = document.getElementById('floatingInputPat');
    const apiBaseUrl = 'https://api.github.com/repos/';
    const spinnerIcon = '<i class="fas fa-spinner fa-spin"></i>'

    //- When URL path is /onboarding/nextstep check if 'step' is in the query string
    //- If yes, show step 2
    //- If no, show step 1
    //- If step 3, save repo infos in DB and redirect to /dashboard
    const urlParams = new URLSearchParams(window.location.search);
    const step = urlParams.get('step');
    const repo = urlParams.get('repo');
    const owner = urlParams.get('owner');
    const description = urlParams.get('description');
    const creationDate = urlParams.get('creationDate');
    const isPrivateRepo = urlParams.get('private');

    if (step === '2') {
      //- Show step 2
      onboardingStepOne.classList.add('d-none');
      onboardingStepTwo.classList.remove('d-none');
      //- Fill repo infos
      showGithubRepoInfos(repo, owner, description, creationDate, isPrivateRepo);

    } else {
      //- Show step 1
      onboardingStepOne.classList.remove('d-none');
      onboardingStepTwo.classList.add('d-none');
    }      

    changeRepoBtn.addEventListener('click', (event) => {
      //- On retire le message flash
      const flashMsg = document.querySelector('.alert');
      flashMsg.remove();
      //- On retire le spinner sur le bouton
      submitBtn.innerHTML = 'Next';

      //- On retire les animations prÃ©cÃ©dentes
      onboardingStepOne.classList.remove('animate__slideOutLeft');
      onboardingStepTwo.classList.remove('animate__slideInRight');
      //- On cache le second en slide out right step
      onboardingStepTwo.classList.add('animate__slideOutRight');

      //- On attend la fin de l'animation et on affiche le premier en slide in left
      setTimeout(function() {
        onboardingStepOne.classList.remove('d-none');
        onboardingStepOne.classList.add('animate__slideInLeft');
        onboardingStepTwo.classList.add('d-none');
      }, 800);
    });

    function extractOwnerAndRepoFromGithubUrl(url) {
      const regex = /^https?:\/\/github\.com\/([^/]+)\/([^/]+)\/?$/i;
      const match = url.match(regex);

      if (!match) {
        return null; // L'URL n'est pas valide
      }

      const owner = match[1];
      const repo = match[2];

      return {
        owner,
        repo,
      };
    }

    async function showGithubRepoInfos(repo, owner, description, creationDate, isPrivate) {
      
      const repoNameField = document.querySelector('#onboardingStepTwo h5.card-title');
      const ownerNameField = document.querySelector('#onboardingStepTwo h6.card-subtitle');
      const repoDescriptionField = document.querySelector('#onboardingStepTwo p.card-text');
      const createdDateField = document.querySelector('#onboardingStepTwo .card-date small');

      //- If repo is private we show lock icon, if not we show globe icon on the right of the repo owner name
      if (isPrivate) {
        ownerNameField.innerHTML = `${owner} <i class="fas fa-lock"></i>`;
      } else {
        ownerNameField.innerHTML = `${owner} <i class="fas fa-globe"></i>`;
      }
      repoNameField.textContent = repo;
      repoDescriptionField.textContent = description;
      createdDateField.textContent = `Created on ${new Date(creationDate).toLocaleDateString()}`;
    }
