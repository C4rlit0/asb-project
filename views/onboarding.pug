extends layout

block content
  include partials/flash
  .flex.items-center.justify-center.min-h-full.w-full
    //- Step One
    .grid.grid-cols-10.gap-6#onboardingStepOne.animate__animated.animate__slideInLeft
      //- First column 60% width
      .col-start-3.col-span-4.mx-4
        .text-center(class="lg:text-left")
          h1.text-5xl.font-bold.leading-tight.mb-3 ðŸ‘‹ Hello, put your automations safe!
          p.text-lg
            | To enable our system to save your Airtable automations,
            br
            | we need a Github Fine-grained Personal Access Token on a new repository.
            br
            | You can find the documentation on how to create one&nbsp;
            a(href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-fine-grained-personal-access-token" target="_blank" class="text-blue-600 underline") here
          p.my-4
            small.italic Your Github PAT needs these permissions to work:
          ul.list-none.px-5.divide-y.border.rounded-box
            li
              span.flex.justify-between.my-2
                small.font-bold Contents
                small.text-gray-500 Read and write
            li
              span.flex.justify-between.my-2
                small.font-bold Metadata
                small.text-gray-500 Read-only
            li
              span.flex.justify-between.my-2
                small.font-bold Workflows
                small.text-gray-500 Read and write
      .col-start-7.col-span-2.mx-4.mt-2
        //- Column with Github Repo URL and Github PAT inputs
        form.p-8.border.rounded-lg.bg-slate-100.border(id='form' method='POST' action='/onboarding')
          input(type='hidden', name='_csrf', value=_csrf)
          .mb-3#repoForm
            label.block.text-sm.font-medium.text-gray-700.mb-2(for='floatingInputRepo' class='block text-sm font-medium text-gray-700') Enter your Github repo URL
            input#floatingInputRepo.form-control.form-input.w-full.shadow-sm.rounded-md.px-3.py-2.border.border-gray-300.mt-1(type='url', name="floatingInputRepo" placeholder='Enter your Github repo URL' required)
          .mb-3#patForm
            label(for='floatingInputPat' class='block text-sm font-medium text-gray-700') Enter your Github PAT
            input#floatingInputPat.form-control.form-input.w-full.shadow-sm.rounded-md.px-3.py-2.border.border-gray-300.mt-1(type='text', name="floatingInputPat" placeholder='Enter your Github PAT' required)
          button#submitBtn.w-full.mt-2.py-2.px-4.border.border-transparent.rounded-md.shadow-sm.text-sm.font-medium.text-white.bg-primary-color(class="hover:bg-blue-700" type='submit') Next
          hr.my-4
          small.text-gray-500 By clicking Next, you agree to the 
            a.text-primary-color.underline(href="#") terms of use.

    //- Step Two
    .grid.grid-cols-10.gap-6.hidden#onboardingStepTwo.animate__animated
      .col-start-3.col-span-4.mx-4
        .text-center(class="lg:text-left")
          h1.text-5xl.font-bold.leading-tight.mb-3 ðŸŽ‰ Let's check that everything is correct!
        p.text-lg
          | Check that the identified repo is the right one
          br
          | It's in this directory that we will save your Airtable automations.
      .col-start-7.col-span-2.mx-4.mt-2
        form#form.p-8.border.rounded-lg.bg-slate-100.border(method='POST' action='/onboarding/nextstep')
          input(type='hidden', name='_csrf', value=_csrf)
          .mb-3
            h6#ownerNameField.text-gray-500.mb-2 Owner name
            h5#repoNameField.text-xl.font-bold Repository name
            p#repoDescriptionField Repo description
            //- Creation date small and text aligned right
            .text-right.text-gray-500
              small#createdDateField Creation date
          button#finishBtn.w-full.py-2.px-4.border.border-transparent.rounded-md.shadow-sm.text-sm.font-medium.text-white.bg-primary-color(class="hover:bg-blue-700" type='submit') Finish
          //- Add link to return if repo is not the right one
          .text-center
            a.btn.btn-link#changeRepoBtn.text-primary-color.underline(href="#") Change repo

  script.
    //- On click, check if the Github PAT is valid
    const onboardingStepOne = document.getElementById('onboardingStepOne');
    const onboardingStepTwo = document.getElementById('onboardingStepTwo');
    const submitBtn = document.getElementById('submitBtn');
    const finishBtn = document.getElementById('finishBtn');
    const changeRepoBtn = document.getElementById('changeRepoBtn');
    const form = document.getElementById('form');
    const repoForm = document.getElementById('repoForm');
    const patForm = document.getElementById('patForm');
    const inputRepo = document.getElementById('floatingInputRepo');
    const inputPat = document.getElementById('floatingInputPat');
    const apiBaseUrl = 'https://api.github.com/repos/';
    const spinnerIcon = '<lord-icon src="https://cdn.lordicon.com/fyxgoiep.json" trigger="loop" state="loop-cycle" style="width:24px;height:24px" stroke="bold" colors="secondary:#ffffff"></lord-icon>';

    //- When URL path is /onboarding/nextstep check if 'step' is in the query string
    //- If yes, show step 2
    //- If no, show step 1
    //- If step 3, save repo infos in DB and redirect to /dashboard
    const urlParams = new URLSearchParams(window.location.search);
    const step = urlParams.get('step');
    const repo = urlParams.get('repo');
    const owner = urlParams.get('owner');
    const description = urlParams.get('description');
    const creationDate = urlParams.get('creationDate');
    const isPrivateRepo = urlParams.get('private');

    if (step === '2') {
      //- Show step 2
      onboardingStepOne.classList.add('hidden');
      onboardingStepTwo.classList.remove('hidden');
      //- Fill repo infos
      showGithubRepoInfos(repo, owner, description, creationDate, isPrivateRepo);

    } else {
      //- Show step 1
      onboardingStepOne.classList.remove('hidden');
      onboardingStepTwo.classList.add('hidden');
    }

      //-  On submit, replace button text with spinner icon 
      submitBtn.addEventListener('click', (event) => {
        event.preventDefault();
        //- On ajoute un spinner sur le bouton
        submitBtn.innerHTML = spinnerIcon;

        //- On vÃ©rifie que le PAT est bien renseignÃ©
        const pat = inputPat.value;
        if (!pat) {
          //- On retire le spinner sur le bouton
          submitBtn.innerHTML = 'Next';
          //- On affiche un message d'erreur
          const flashMsg = document.querySelector('.alert');
          if (flashMsg) {
            flashMsg.remove();
          }
          const alert = document.createElement('div');
          alert.classList.add('alert', 'alert-error', 'my-4');
          alert.textContent = 'Please enter a Github Personal Access Token';
          patForm.appendChild(alert);
          return;
        }

        //- On vÃ©rifie que l'URL est bien un repo Github
        const url = inputRepo.value;
        const repoInfos = getGithubRepoInfos(url, pat);

        if (!repoInfos) {
          //- On retire le spinner sur le bouton
          submitBtn.innerHTML = 'Next';
          //- On affiche un message d'erreur
          const flashMsg = document.querySelector('.alert');
          if (flashMsg) {
            flashMsg.remove();
          }
          const alert = document.createElement('div');
          alert.classList.add('alert', 'alert-error', 'my-4');
          alert.textContent = 'Please enter a valid Github repository URL';
          repoForm.appendChild(alert);
          return;
        }
      });



      //-   //- On retire les animations prÃ©cÃ©dentes
      //-   onboardingStepOne.classList.remove('animate__slideInLeft');
      //-   onboardingStepTwo.classList.remove('animate__slideOutRight');
      //-   //- On cache le premier en slide out left step
      //-   onboardingStepOne.classList.add('animate__slideOutLeft');

      //-   //- On attend la fin de l'animation et on affiche le second en slide in right
      //-   setTimeout(function() {
      //-     onboardingStepTwo.classList.remove('hidden');
      //-     onboardingStepTwo.classList.add('animate__slideInRight');
      //-     onboardingStepOne.classList.add('hidden');
      //-   }, 400);
      //- });

    changeRepoBtn.addEventListener('click', (event) => {
      //- //- On retire le message flash
      //- const flashMsg = document.querySelector('.alert');
      //- flashMsg.remove();
      //- On retire le spinner sur le bouton
      submitBtn.innerHTML = 'Next';

      //- On retire les animations prÃ©cÃ©dentes
      onboardingStepOne.classList.remove('animate__slideOutLeft');
      onboardingStepTwo.classList.remove('animate__slideInRight');
      //- On cache le second en slide out right step
      onboardingStepTwo.classList.add('animate__slideOutRight');

      //- On attend la fin de l'animation et on affiche le premier en slide in left
      setTimeout(function() {
        onboardingStepOne.classList.remove('hidden');
        onboardingStepOne.classList.add('animate__slideInLeft');
        onboardingStepTwo.classList.add('hidden');
      }, 400);
    });

    async function getGithubRepoInfos(url, pat) {
      const regex = /^https?:\/\/github\.com\/([^/]+)\/([^/]+)\/?$/i;
      const match = url.match(regex);

      if (!match) {
        return null; // L'URL n'est pas valide
      }

      const owner = match[1];
      const repo = match[2];

      //- On envoie une requÃªte Ã  l'API Github pour vÃ©rifier que le repo existe
      await fetch(`${apiBaseUrl}${owner}/${repo}`, {
        headers: {
          Authorization: `token ${pat}`,
        },
      })
        .then((response) => {
          if (!response.ok) {
            //- On retire le spinner sur le bouton
            submitBtn.innerHTML = 'Next';
            //- On affiche un message d'erreur
            const flashMsg = document.querySelector('.alert');
            if (flashMsg) {
              flashMsg.remove();
            }
            const alert = document.createElement('div');
            alert.classList.add('alert', 'alert-error', 'my-4');
            alert.textContent = 'The repository does not exist or you do not have the necessary permissions';
            repoForm.appendChild(alert);
            return;
          }

          //- On retire le message flash
          const flashMsg = document.querySelector('.alert');
          if (flashMsg) {
            flashMsg.remove();
          }

          //- On rÃ©cupÃ¨re les infos du repo
          response.json().then((data) => {
            const repoInfos = {
              repo: data.name,
              owner: data.owner.login,
              description: data.description ? data.description : '',
              creationDate: data.created_at,
              isPrivate: data.private,
            };
            
            //- On redirige vers la page suivante en ajoutant les infos du repo dans l'URL
            window.location.href = `/onboarding/nextstep?step=2&repo=${repoInfos.repo}&owner=${repoInfos.owner}&description=${repoInfos.description}&creationDate=${repoInfos.creationDate}&private=${repoInfos.isPrivate}`;
          });
        })
        .catch((error) => {
          console.error(error);
        });
    }

    async function showGithubRepoInfos(repo, owner, description, creationDate, isPrivate) {
      
      const repoNameField = document.getElementById('repoNameField');
      const ownerNameField = document.getElementById('ownerNameField');
      const repoDescriptionField = document.getElementById('repoDescriptionField');
      const createdDateField = document.getElementById('createdDateField');

      //- If repo is private we show lock icon, if not we show globe icon on the right of the repo owner name
      if (isPrivate) {
        repoNameField.innerHTML = `<lord-icon src="https://cdn.lordicon.com/lbjtvqiv.json" trigger="in" stroke="bold" colors="secondary:#3B13B0" style="width:24px;height:24px;"></lord-icon> ${repo}`;
      } else {
        repoNameField.innerHTML = `${repo} <lord-icon src="https://cdn.lordicon.com/tltikfri.json" trigger="loop"></lord-icon>`;
      }
      ownerNameField.innerHTML = owner;
      repoDescriptionField.textContent = description;
      createdDateField.textContent = `Created on ${new Date(creationDate).toLocaleDateString()}`;
    }
